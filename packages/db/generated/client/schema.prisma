generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql" // or "mysql" / "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  emails        Email[]

  @@index([email]) // Fast login/lookup queries
}

model Email {
  id         String    @id @default(cuid())
  userId     String
  emailId    String    @unique // Ensures no duplicates from Gmail API
  from       String
  snippet    String    @db.Text
  receivedAt DateTime
  processed  Boolean   @default(false)
  subject    String
  summary    String?
  priority   String? // "high" | "medium" | "low"
  action     String?
  dueDate    DateTime?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Strategic indexes for common queries
  @@index([userId, processed])
  @@index([userId, priority, createdAt]) // Main inbox: filter by priority + sort by date
  @@index([userId, createdAt]) // Chronological view
  @@index([userId, dueDate]) // Upcoming deadlines
  @@index([priority, dueDate]) // High priority items with deadlines
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // Fast user account lookups
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Fast user session lookups
  @@index([sessionToken]) // Fast session validation
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([token]) // Fast token verification
  @@index([expires]) // Cleanup expired tokens efficiently
}
